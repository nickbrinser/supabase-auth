{
  "env": {
    "browser": true,
    "es6": true,
    "node": true
  },
  "ignorePatterns": [
    "__screenshots__/",
    "bundle-stats/",
    "design-assets/",
    "dist/",
    "ts-dist/",
    "packages/**/dist/",
    "packages/**/node_modules/",
    "packages/**/*.d.ts",
    "packages/e2e/**/*"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": ["./tsconfig.json"],
    "sourceType": "module",
    "ecmaFeatures": { "jsx": true },
    // Fixes some issues with some of the type-based checks in @typescript-eslint
    // See wall of text here: https://github.com/typescript-eslint/typescript-eslint/issues/2094
    "EXPERIMENTAL_useSourceOfProjectReferenceRedirect": true
  },
  "plugins": [
    "@typescript-eslint",
    "import",
    "react",
    "react-hooks",
    "simple-import-sort"
  ],

  "rules": {
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "generic"
      }
    ],
    "@typescript-eslint/ban-types": [
      "error",
      {
        "extendDefaults": false, // Don't rely on the defaults, let's customize it ourselves
        "types": {
          "Object": {
            "message": "Avoid using the `Object` type. Prefer a generic type parameter if you can, or use `object` or `{}` if you have to use a raw object type.",
            "fixWith": "object"
          },
          // Disable the rule for `object` and `{}` as there are enough legit use cases of this that we don't want to punish people too hard for using them
          "object": false,
          "{}": false,
          "Function": {
            "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
          },
          "Boolean": {
            "message": "Avoid using the `Boolean` type. Prefer `boolean` instead.",
            "fixWith": "boolean"
          },
          "Number": {
            "message": "Avoid using the `Number` type. Prefer `number` instead.",
            "fixWith": "number"
          },
          "String": {
            "message": "Avoid using the `String` type. Prefer `string` instead.",
            "fixWith": "string"
          },
          "Symbol": {
            "message": "Avoid using the `Symbol` type. Prefer `symbol` instead.",
            "fixWith": "symbol"
          }
        }
      }
    ],
    "@typescript-eslint/consistent-type-assertions": "error",
    "@typescript-eslint/consistent-type-definitions": "off",
    "@typescript-eslint/dot-notation": "error",
    "@typescript-eslint/explicit-member-accessibility": [
      "error",
      {
        "accessibility": "no-public"
      }
    ],
    "@typescript-eslint/indent": "off",
    "@typescript-eslint/member-delimiter-style": [
      "off",
      {
        "multiline": {
          "delimiter": "none",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": false
        }
      }
    ],
    "@typescript-eslint/member-ordering": "off",
    "@typescript-eslint/naming-convention": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-misused-new": "error",
    "@typescript-eslint/no-namespace": "error",
    "@typescript-eslint/no-parameter-properties": "off",
    "@typescript-eslint/no-shadow": "off",
    "@typescript-eslint/no-this-alias": "off",
    "@typescript-eslint/no-unsafe-assignment": "error",
    "@typescript-eslint/no-unsafe-call": "error",
    "@typescript-eslint/no-unsafe-member-access": "error",
    "@typescript-eslint/no-unsafe-return": "error",
    "@typescript-eslint/no-unused-expressions": [
      "error",
      {
        "allowShortCircuit": true,
        "allowTernary": true,
        "allowTaggedTemplates": true
      }
    ],
    "@typescript-eslint/no-unused-vars": [
      /* TODO: make this a warning for now - we'll come back an fix/errorify this separately, then make it an error */
      "error",
      {
        "varsIgnorePattern": "^_.*",
        "argsIgnorePattern": "^_.*"
      }
    ],
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/prefer-namespace-keyword": "error",
    "@typescript-eslint/quotes": "off",
    "@typescript-eslint/semi": ["off", null],
    "@typescript-eslint/switch-exhaustiveness-check": "error",
    "@typescript-eslint/triple-slash-reference": [
      "error",
      {
        "path": "always",
        "types": "prefer-import",
        "lib": "always"
      }
    ],
    "@typescript-eslint/type-annotation-spacing": "off",
    "@typescript-eslint/unified-signatures": "error",
    "array-callback-return": "off",
    "arrow-body-style": "off",
    "arrow-parens": ["off", "always"],
    "brace-style": ["off", "off"],
    "comma-dangle": "off",
    "complexity": "off",
    "constructor-super": "error",
    "curly": "error",
    "eol-last": "off",
    "eqeqeq": ["error", "always"],
    "guard-for-in": "error",
    "id-blacklist": "off",
    "id-match": "off",
    "import/no-default-export": "off",
    "import/no-internal-modules": "off",
    "import/order": "off",
    "jsdoc/check-alignment": "off",
    "jsdoc/check-indentation": "off",
    "jsdoc/newline-after-description": "off",
    "linebreak-style": "off",
    "max-classes-per-file": "off",
    "max-len": "off",
    "new-parens": "off",
    "newline-per-chained-call": "off",
    "no-bitwise": "error",
    "no-caller": "error",
    "no-cond-assign": "error",
    "no-console": "warn",
    "no-debugger": "error",
    "no-duplicate-case": "error",
    "no-duplicate-imports": "error",
    "no-empty": "error",
    "no-eval": "error",
    "no-extra-bind": "error",
    "no-extra-semi": "off",
    "no-fallthrough": "off",
    "no-invalid-this": "off",
    "no-irregular-whitespace": "off",
    "no-multiple-empty-lines": "off",
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "no-redeclare": "off",
    "no-return-await": "error",
    "no-sequences": "error",
    "no-shadow": "off",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "error",
    "no-throw-literal": "error",
    "no-trailing-spaces": "off",
    "no-undef-init": "error",
    "no-underscore-dangle": "off",
    "no-unsafe-finally": "error",
    "no-unused-labels": "error",
    "no-unused-vars": "off",
    "no-use-before-define": "off",
    "no-var": "error",
    "object-shorthand": "off",
    "one-var": ["off", "never"],
    "prefer-const": "error",
    "prefer-object-spread": "error",
    "quote-props": "off",
    "radix": ["error", "always"],
    "react/jsx-curly-spacing": "off",
    "react/jsx-equals-spacing": "off",
    "react/jsx-key": "error",
    "react/jsx-pascal-case": "off",
    "react/jsx-wrap-multilines": "off",
    "react-hooks/exhaustive-deps": [
      "error",
      {
        "additionalHooks": "(useRTEEffect)"
      }
    ],
    "simple-import-sort/imports": [
      "error",
      {
        "groups": [
          // Rules for packages:
          // Match: anything that start with a letter (or digit or underscore) or `@` followed by a letter
          ["^react*", "^@?\\w", "^fp-ts*"],
          // Absolute imports
          ["^src/"],
          // Anything that does not start with a dot
          ["^[^.]"],
          // Relative imports.
          // Anything that starts with a dot
          ["^\\."],
          // "Side effect" imports
          ["^\\u0000"]
        ]
      }
    ],
    "space-before-function-paren": "off",
    "space-in-parens": ["off", "never"],
    "spaced-comment": "off",
    "use-isnan": "error",
    "valid-typeof": "off"
  },
  "globals": {
    "__CUSTOMER_VARIANT__": "readonly",
    "__DEV__": "readonly",
    "__SIMSPACE_HOSTED__": "readonly",
    "__VERSION__": "readonly"
  },
  "overrides": [
    {
      "files": ["**/*.js"],
      "rules": {
        // Turn off no-unsafe-* for .js files because there is insufficient type information in the .js files
        // to meaningfully enforce these rules.
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "no-undef": "error"
      }
    },
    {
      "files": [
        "**/*.jest.js",
        "**/*.test.js",
        "**/*-test.js",
        "**/__tests__/*",
        "**/test/**"
      ],
      "globals": {
        "expect": "readonly",
        "describe": "readonly",
        "test": "readonly",
        "it": "readonly",
        "beforeAll": "readonly",
        "beforeEach": "readonly"
      }
    }
  ]
}
